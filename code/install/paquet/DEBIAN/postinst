#!/bin/bash

###########################
# Parameters / Paramètres #
###########################

PAQUETNAME=snack
VERSION=1.0
DATABASE=radius

USER_HOME=/home/snack
TMP=/tmp/snack
SSL_CONF=/etc/ssl/openssl.cnf
RADIUS_PATH=/etc/freeradius
APACHE_PATH=/etc/apache2
OUT=/tmp/snack_out.log
LOG=/tmp/snack_errors.log

DEST_PATH=$USER_HOME/cert

RADCERT_VALIDITY=3650 #ten years
CA_CERT_VALIDITY=3650 #ten years

HOME_MODE=0070
ONLY_RADIUS_ACCESS=0700
INTERFACE_ACCESS=0770 
INTERFACE_THROUGH=0710
READ_ONLY=0440
ONLY_INTERFACE_ACCESS=0700

INTERFACE_USER=www-data
RADIUS_USER=freerad

CA_KEY=cakey.pem
CA_REQ=careq.pem
CA_CERT=cacert.pem

RADIUS_KEY=radius_key.pem
RADIUS_REQ=radius_req.pem
RADIUS_CERT=radius_cert.pem

EAP_CONF=${RADIUS_PATH}/eap.conf
SQL_CONF=${RADIUS_PATH}/sql.conf
RADIUSD_CONF=${RADIUS_PATH}/radiusd.conf

APACHE_PORTS_CONF=${APACHE_PATH}/ports.conf
APACHE_SNACK=${APACHE_PATH}/sites-available/snack


BACKUP_CONFIG_SCRIPT=$USER_HOME/scripts/backupConfig.sh
BACKUP_CREATE_SCRIPT=$USER_HOME/scripts/backup_create.sh
BACKUP_TRAPS_SCRIPT=$USER_HOME/scripts/backup_traps.sh
TFTP_FOLDER=$USER_HOME/backups.git

STEP=1
LAST_STEP=6
DISPLAY_SLEEP=0.5

whiptail \
	--title "SNACK ${VERSION}" \
	--yes-button "Start" \
	--no-button "Cancel" \
	--yesno "\nWelcome !\n\nYou are installing SNACK.\n\nAll errors are logged in /tmp/snack_errors.log\nStdout are logged in /tmp/snack_out.log" \
	15 70

if [ $? != 0 ]; then
	whiptail \
		--title "SNACK ${VERSION}" \
		--msgbox "\n\nUser has canceled the installation!" \
		10 70
	exit 1
fi
	
##############################################################
# Radius-Mysql configuration / Configuration de Radius-Mysql #
##############################################################

echo 0 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring Mysql for Radius...Create database." \
	10 70 0
sleep $DISPLAY_SLEEP

# Create database + Add default admin user account
# Création de la base de donnée + Ajout d'un compte administrateur par défaut

PASSWORD_DB_ROOT=$(whiptail \
	--title "SNACK ${VERSION}" \
	--passwordbox "\n\nWhat is the MySQL password for 'ROOT' user?" \
	10 70 3>&1 1>&2 2>&3)
 
if [ $? != 0 ]; then
	whiptail \
		--title "SNACK ${VERSION}" \
		--msgbox "\n\nUser has canceled the installation!" \
		10 70
	exit 1
fi

while [ -z "${PASSWORD_RADIUS}" -o ${PASSWORD_RADIUS} != ${PASSWORD_RADIUS_BIS} ] 
do
    if [ -n "${PASSWORD_RADIUS}" ]
    then
	echo "Passwords not corresponding!" >> $LOG
	whiptail \
		--title "SNACK ${VERSION}" \
		--infobox "\n\nError: Passwords not corresponding!" \
		10 70
	sleep $DISPLAY_SLEEP
	sleep $DISPLAY_SLEEP
    fi

    PASSWORD_RADIUS=$(whiptail \
	--title "SNACK ${VERSION}" \
	--passwordbox "\n\nPlease, define the password for 'ADMIN' user:" \
	10 70 3>&1 1>&2 2>&3)
     
    if [ $? != 0 ]; then
	whiptail \
		--title "SNACK ${VERSION}" \
		--msgbox "\n\nUser has canceled the installation!" \
		10 70
    	exit 1
    fi
    
    PASSWORD_RADIUS_BIS=$(whiptail \
	--title "SNACK ${VERSION}" \
	--passwordbox "\n\nPlease, re-enter the password for 'ADMIN' user:" \
	10 70 3>&1 1>&2 2>&3)
     
    if [ $? != 0 ]; then
	whiptail \
		--title "SNACK ${VERSION}" \
		--msgbox "\n\nUser has canceled the installation!" \
		10 70
    	exit 1
    fi
done

MYSQL_RES=$(echo "	CREATE DATABASE ${DATABASE} DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\
			GRANT ALL ON ${DATABASE}.* to radius@localhost identified by '${PASSWORD_RADIUS}';\
			GRANT ALL ON ${DATABASE}.logs to logsfreeradius@localhost identified by 'logsfreeradius';\
			flush privileges;\
" | mysql -uroot -p${PASSWORD_DB_ROOT} 2>&1 >>$OUT)

until [ $? -eq 0 ]
do
	if [[ $MYSQL_RES =~ .*"database exists".* ]]; then
		whiptail \
			--title "SNACK ${VERSION}" \
			--yesno "\nDatabase '${DATABASE}' exists!\n\nDo you want to override it ?" \
			10 70

		if [ $? == 0 ]; then
			echo "DROP DATABASE ${DATABASE};" | mysql -uroot -p${PASSWORD_DB_ROOT} >>$OUT 2>>$LOG
		else
			whiptail \
				--title "SNACK ${VERSION}" \
				--msgbox "\n\nUser has canceled the installation!" \
				10 70
    			exit 1
		fi
	else
		PASSWORD_DB_ROOT=$(whiptail \
			--title "SNACK ${VERSION}" \
			--passwordbox "\n\nError: Cannot create database!\nWhat is the Mysql password for root?" \
			10 70 3>&1 1>&2 2>&3)
 
		if [ $? != 0 ]; then
			whiptail \
				--title "SNACK ${VERSION}" \
				--msgbox "\n\nUser has canceled the installation!" \
				10 70
			exit 1
		fi
	fi

	MYSQL_RES=$(echo "	CREATE DATABASE ${DATABASE} DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\
				GRANT ALL ON ${DATABASE}.* to radius@localhost identified by '${PASSWORD_RADIUS}';\
				GRANT ALL ON ${DATABASE}.logs to logsfreeradius@localhost identified by 'logsfreeradius';\
				flush privileges;\
	" | mysql -uroot -p${PASSWORD_DB_ROOT} 2>&1 >>$OUT)
done

echo 20 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring Mysql for Radius...\nCreate tables." 10 70 0

mysql -uroot -p${PASSWORD_DB_ROOT} ${DATABASE} < ${TMP}/schema.sql >> $OUT 2>>$LOG

echo "INSERT INTO radcheck(UserName, Attribute, op, Value) VALUES ('admin', 'Cleartext-Password', ':=', '${PASSWORD_RADIUS}');" | mysql -uroot -p${PASSWORD_DB_ROOT} ${DATABASE} >> $OUT 2>>$LOG
echo "INSERT INTO raduser(UserName, Admin) VALUES ('admin', true);" | mysql -uroot -p${PASSWORD_DB_ROOT} ${DATABASE} >> $OUT 2>>$LOG

echo 50 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring Mysql for Radius...\nConfigure Freeradius." \
	10 70 0

# Configuration de Radius pour intéragir avec la base de donnée
# Radius configuration in order to interact with our database

sed\
	-e "s/radpass/${PASSWORD_RADIUS}/"\
	-e "s/#\(readclients\)/\1/"\
	-i $SQL_CONF \
>> $OUT 2>>$LOG

echo 75 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring Mysql for Radius...\nConfigure Freeradius." \
	10 70 0

sed\
	-e 's/#\(\s*\$INCLUDE sql\.conf\)/\1/'\
	-e 's/#\(\s*\$INCLUDE sql\/mysql\/counter.conf\)/\1/'\
	-e 'N; s/\(#\s*clients\s*=\s*per_socket_clients.*\)\(}\)/\1\tvirtual_server = snack\n\2/'\
	-e 's/\(\$INCLUDE clients\.conf\)/#\1/'\
	-i $RADIUSD_CONF \
>> $OUT 2>>$LOG

echo 100 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring Mysql for Radius...\nDone!" \
	10 70 0
sleep $DISPLAY_SLEEP

STEP=2

##############################
# Certificates / Certificats #
##############################

echo 0 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius..." \
	10 70 0
sleep $DISPLAY_SLEEP

CLIENTNAME=$(whiptail \
	--title "SNACK ${VERSION}" \
	--inputbox "\n\nEnter the name of the client (CA common name):" \
	10 70 3>&1 1>&2 2>&3)
     
if [ $? != 0 ]; then
	whiptail \
		--title "SNACK ${VERSION}" \
		--msgbox "\n\nUser has canceled the installation!" \
		10 70
	exit 1
fi

echo 5 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nConfigure SSL." \
	10 70 0

# Update openssl.cnf configuration
# Mise à jour de la configuration openssl.cnf

{
sed \
	-e "s|^\(dir\s*=\s*\)\S\+\(.*\)$|\1$DEST_PATH\2|"\
	-e "s|^\(certificate\s*=\s*\)\S\+\(.*\)$|\1\$dir/private/cacert.pem\2|"\
	-i $SSL_CONF
echo "" >> $SSL_CONF

echo "[xpclient_ext]" >> $SSL_CONF
echo "extendedKeyUsage=1.3.6.1.5.5.7.3.2" >> $SSL_CONF
echo "" >> $SSL_CONF
echo "[xpserver_ext]" >> $SSL_CONF
echo "extendedKeyUsage=1.3.6.1.5.5.7.3.1" >> $SSL_CONF
} >> $OUT 2>>$LOG

echo 10 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nCreate directories." \
	10 70 0

# Creation of the needed repertories
# Création des répertoires nécessaires

{
if test ! -d $USER_HOME
then
	mkdir -p $USER_HOME -m $HOME_MODE
fi

mkdir $DEST_PATH -m $INTERFACE_ACCESS;
mkdir "${DEST_PATH}/certs" -m $INTERFACE_THROUGH;
mkdir "${DEST_PATH}/crl" -m $INTERFACE_ACCESS ;
mkdir "${DEST_PATH}/newcerts" -m $INTERFACE_ACCESS;
mkdir "${DEST_PATH}/private" -m $INTERFACE_THROUGH;
mkdir "${DEST_PATH}/users" -m $INTERFACE_ACCESS;
touch $DEST_PATH/index.txt
echo "01" > $DEST_PATH/crlnumber
} >> $OUT 2>>$LOG

echo 20 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nGenerate certificate authority.\nCould take a long time." \
	10 70 0

# Creation of the Authority Certificate (CA)
# Création du certificat d'autorité (CA)

{
openssl genrsa -out $DEST_PATH/private/$CA_KEY 4096

openssl req \
	-new \
	-key $DEST_PATH/private/$CA_KEY \
	-subj /countryName=FR/stateOrProvinceName=France/localityName=Nancy/organizationName="B.H. Consulting"/commonName="$CLIENTNAME"/ \
	-out $DEST_PATH/private/$CA_REQ

openssl ca \
	-config /etc/ssl/openssl.cnf \
	-create_serial \
	-out $DEST_PATH/private/$CA_CERT \
	-days $CA_CERT_VALIDITY \
	-batch \
	-keyfile $DEST_PATH/private/$CA_KEY \
	-selfsign \
	-extensions v3_ca \
	-infiles $DEST_PATH/private/$CA_REQ
} >> $OUT 2>>$LOG

echo 30 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nSet permissions." \
	10 70 0

# Setting approriates permissions
# Affectation des permissions

{
chown $INTERFACE_USER $DEST_PATH/private/$CA_KEY
chmod $INTERFACE_ACCESS $DEST_PATH/private/$CA_KEY
chmod $READ_ONLY $DEST_PATH/private/$CA_CERT
} >> $OUT 2>>$LOG

echo 35 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nGenerate Freeradius certificate.\nCould take a long time." \
	10 70 0

# Creation of the radius certificate
# Création du certificat authentifiant le server radius

{
openssl genrsa -out $DEST_PATH/private/$RADIUS_KEY 4096

openssl req \
	-config /etc/ssl/openssl.cnf -new -key $DEST_PATH/private/$RADIUS_KEY \
	-subj /countryName=FR/stateOrProvinceName=France/localityName=Nancy/organizationName="B.H. Consulting"/commonName=`hostname`/ \
	-out $DEST_PATH/private/$RADIUS_REQ \
	-days $RADCERT_VALIDITY

openssl ca \
	-config /etc/ssl/openssl.cnf \
	-policy policy_anything \
	-out $DEST_PATH/private/$RADIUS_CERT \
	-batch \
	-extensions xpserver_ext \
	-infiles $DEST_PATH/private/$RADIUS_REQ
} >> $OUT 2>>$LOG

echo 40 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nSet permissions." \
	10 70 0

# Setting approriates permissions
# Affectation des permissions

{
chown $RADIUS_USER $DEST_PATH/private/$RADIUS_KEY
chown $RADIUS_USER $DEST_PATH/private/$RADIUS_CERT
chmod $ONLY_RADIUS_ACCESS $DEST_PATH/private/$RADIUS_KEY
chmod $ONLY_RADIUS_ACCESS $DEST_PATH/private/$RADIUS_CERT
} >> $OUT 2>>$LOG

echo 45 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nCreate certificate revocation list.\nCould take a long time." \
	10 70 0

# First CRL Generation + link to permit revocation verifications
# Première génération de la CRL + permission de révocation

{
openssl ca \
	-config /etc/ssl/openssl.cnf \
	-gencrl \
	-out $DEST_PATH/crl/crl.pem

HASH=`openssl x509 -noout -hash -in $DEST_PATH/private/$CA_CERT`
ln -s $DEST_PATH/private/$CA_CERT $DEST_PATH/certs/$HASH.0
ln -s $DEST_PATH/crl/crl.pem $DEST_PATH/certs/$HASH.r0
} >> $OUT 2>>$LOG

# Setting approriates permissions
# Affectation des permissions

{
chown $RADIUS_USER $DEST_PATH/crl/crl.pem
chmod $INTERFACE_ACCESS $DEST_PATH/crl/crl.pem
} >> $OUT 2>>$LOG

echo 60 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nConfigure random module.\nCould take a long time." \
	10 70 0

# Now, we configure the radius to use certificates
# Maintenant, on configure le radius pour qu'il utilise les certificats

# First, we must create those two file
# On doit d'abord créer ces deux fichiers

{
dd if=/dev/urandom of=$DEST_PATH/random count=2
openssl dhparam -check -text -5 1024 -out $DEST_PATH/dh
} >> $OUT 2>>$LOG

# Setting approriates permissions
# Affectation des permissions

{
chown $RADIUS_USER $DEST_PATH/random
chown $RADIUS_USER $DEST_PATH/dh
chmod $ONLY_RADIUS_ACCESS $DEST_PATH/random
chmod $ONLY_RADIUS_ACCESS $DEST_PATH/dh
} >> $OUT 2>>$LOG

echo 70 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nConfigure Freeradius TLS authentication." \
	10 70 0

# Setting the eap.conf file
# onfiguration du fichier eap.conf

# TLS
sed\
        -e "/certdir =/i \\\t\t\tconfdir = $DEST_PATH"\
        -e "/certdir =/c \\\t\t\tcertdir = \${confdir}"\
        -e "/cadir =/c \\\t\t\tcadir = \${confdir}/private"\
        -e "/private_key_password =/c \\\t\t\tprivate_key_password ="\
        -e "/private_key_file =/c \\\t\t\tprivate_key_file = \${cadir}/$RADIUS_KEY"\
        -e "/^\s*certificate_file =/c \\\t\t\tcertificate_file = \${cadir}/$RADIUS_CERT"\
        -e "/^\s*CA_file =/c \\\t\t\tCA_file = \${cadir}/$CA_CERT"\
        -e "/dh_file =/c \\\t\t\tdh_file = \${certdir}/dh"\
        -e "/check_crl =/c \\\t\t\tcheck_crl = yes"\
        -e "/^\s*#*CA_path =/c \\\t\t\tCA_path = \${certdir}/certs"\
        -e "/^\s*#*\s*check_cert_cn =/c \\\t\t\tcheck_cert_cn = %{User-Name}"\
        -i $EAP_CONF \
>> $OUT 2>>$LOG

echo 80 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nImport scripts for the web interface." \
	10 70 0


# Setting approriates permissions
# Affecter les permissions

{
chown -R $INTERFACE_USER $USER_HOME/scripts
chmod -R $ONLY_INTERFACE_ACCESS $USER_HOME/scripts
} >> $OUT 2>>$LOG

echo 90 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nPopulate snack group." \
	10 70 0

# Setting access groups to include web interface and radius
# Nouveau groupe regroupant l'interface et le radius

{
usermod -a -G snack $RADIUS_USER
usermod -a -G snack $INTERFACE_USER
chown -R :snack $USER_HOME
} >> $OUT 2>>$LOG

echo 100 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring certificates for Radius...\nDone!" \
	10 70 0
sleep $DISPLAY_SLEEP

STEP=3

##########
# Apache #
##########

echo 0 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring apache for Radius...\nVirtual servers management." \
	10 70 0
sleep $DISPLAY_SLEEP

# Apache configuration
# Configuraton du serveur Apache

{
sed \
	-e "s|INTERFACE_PATH|${USER_HOME}/interface|"\
	-i $APACHE_SNACK

rm -f ${APACHE_PATH}/sites-enabled/000-default
} >> $OUT 2>>$LOG

echo 30 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring apache for Radius...\nEnable ssl and rewrite modules." \
	10 70 0

{
a2enmod ssl
a2enmod rewrite
} >> $OUT 2>>$LOG

echo 60 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring apache for Radius...\nMysql access for radius." \
	10 70 0

sed \
	-e "s/\('password' =>\) '.*'/\1 '${PASSWORD_RADIUS}'/"\
	-i ${USER_HOME}/interface/app/Config/database.php \

>> $OUT 2>>$LOG

echo 90 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring apache for Radius...\nAutomaticaly Setting IP" \
	10 70 0
{
IP=`ip a | grep eth | head -1 | grep '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' | cut -d ' ' -f6 | cut -d '/' -f1`
if [ ! $IP = '' ]
then
sed\
	-e "s/\('ipAddress' => '\)[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/\1$IP/g"\
	-i $USER_HOME/interface/app/Config/parameters.php
fi
} >> $OUT 2>>$LOG



echo 100 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring apache for Radius...\nDone!" \
	10 70 0
sleep $DISPLAY_SLEEP

##########
# Syslog #
##########

echo 0 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring syslog for Radius..." \
	10 70 0
sleep $DISPLAY_SLEEP

# Activate syslog for freeradius
# Active Syslog pour Freeradius
sed\
	-e 's/\(destination\s*=\s*\).*$/\1syslog/'\
	-e 's/\(syslog_facility\s*=\s*\).*$/\1local2/'\
	-i $RADIUSD_CONF \
>> $OUT 2>>$LOG

echo 100 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring syslog for Radius...\nDone!" \
	10 70 0
sleep $DISPLAY_SLEEP

STEP=4

#####################################################
#Configuration backups/Sauvegarde des configurations#
#####################################################

echo 0 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring backups system...\nCreate directories" \
	10 70 0
{
mkdir -p $TFTP_FOLDER
chown snack:snack $TFTP_FOLDER
chmod 0770 $TFTP_FOLDER
} >> $OUT 2>>$LOG

echo 30 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring backups system...\nSet scripts permissions" \
	10 70 0
{
chmod +x $USER_HOME/scripts
chown snmp:snack $BACKUP_CREATE_SCRIPT
chmod 0550 $BACKUP_CREATE_SCRIPT
chown snmp:snack $BACKUP_TRAPS_SCRIPT
chmod 0550 $BACKUP_TRAPS_SCRIPT
} >> $OUT 2>>$LOG


echo 60 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring backups system...\nAdapting services configurations" \
	10 70 0
{
cat >> /etc/snmp/snmptrapd.conf <<TRAPCONF
	donotlogtraps false
        logOption f /var/log/snmptraps.log
        authCommunity log,execute,net private
        traphandle 1.3.6.1.4.1.9.9.43.* $BACKUP_TRAPS_SCRIPT
TRAPCONF

cat > /etc/freeradius/modules/snack-backups <<MODULES
exec snack-backups {
            program = "$BACKUP_CREATE_SCRIPT"
            wait = no
            input_pairs = request
            shell_escape = yes
            output = none
}
MODULES
sed\
	-e "/exec/c \\\texec /usr/sbin/in.tftpd --listen --user snack --address 0.0.0.0:69 --secure $TFTP_FOLDER -c"\
	-i /etc/init/tftpd-hpa.conf

sed\
	-e "/TRAPDRUN=no/c TRAPDRUN=yes"\
	-i /etc/init.d/snmpd

[ -r /etc/default/snmpd ] && sed\
	-e "/TRAPDRUN=no/c TRAPDRUN=yes"\
	-i /etc/default/snmpd

sed\
	-e"s/\(TFTP_DIRECTORY=\"\)\/var\/lib\/tftpboot/\1$TFTP_FOLDER/"\
	-i /etc/default/tftpd-hpa
} >> $OUT 2>>$LOG

echo 90 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Configuring backups system...\nIntiate git" \
	10 70 0
{(cd $TFTP_FOLDER && git init)} >> $OUT 2>>$LOG


STEP=5

echo 0 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Restarting services...\nSyslog-ng" \
	10 70 0

service syslog-ng restart >> $OUT 2>>$LOG

echo 20 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Restarting services...\nFreeradius" \
	10 70 0

service freeradius restart >> $OUT 2>>$LOG

echo 40 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Restarting services...\nApache2" \
	10 70 0

service apache2 restart >> $OUT 2>>$LOG

echo 60 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Restarting services...\nTftp" \
	10 70 0

{
/usr/sbin/in.tftpd --listen --user snack --address 0.0.0.0:69 --secure $TFTP_FOLDER -c
sudo service tftpd-hpa stop
} >> $OUT 2>>$LOG

echo 80 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Restarting services...\nSnmptrapd" \
	10 70 0

{
snmptrapd 
} >> $OUT 2>>$LOG

echo 100 | whiptail \
	--title "SNACK ${VERSION}" \
	--gauge "\n\nStep #${STEP}/${LAST_STEP}: Restarting services...\nDone!" \
	10 70 0
sleep $DISPLAY_SLEEP

STEP=6

# Delete temporary directory
# Suppression du dossier temporaire

whiptail \
	--title "SNACK ${VERSION}" \
	--infobox "\n\nStep #${STEP}/${LAST_STEP}: Cleaning..." \
	10 70
sleep $DISPLAY_SLEEP

rm -r ${TMP} >> $OUT 2>>$LOG

whiptail \
	--title "SNACK ${VERSION}" \
	--ok-button "Finish" \
	--msgbox "\n\nInstallation done!" \
	10 70

exit 0

